services:
  product-composition-api:
    image: wiremock/wiremock:3.5.2
    ports:
      - "1080:8080"
    environment:
      WIREMOCK_OPTIONS: "--verbose"
    volumes:
      - ./wiremock:/home/wiremock
  database:
    image: postgres:15-alpine3.21
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    user: postgres
    environment:
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./db/create-database.sql:/docker-entrypoint-initdb.d/create-database.sql
      - db-data:/var/lib/postgresql/data
      - ./db/:/db/
  kafka:
    image: confluentinc/cp-kafka:7.8.0
    ports:
      - 9092:9092
    expose:
      - 29092
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      CLUSTER_ID: q1Sh-9_ISia_zwGINzRvyQ
      KAFKA_ENABLE_KRAFT: yes

  init-kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - kafka
    entrypoint: ["/bin/bash", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic product-compositions --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic product-impacts --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list

      kafka-console-producer --bootstrap-server kafka:29092 --topic product-compositions --property 'parse.key=true' --property 'key.separator=|' <<< 'P059|{"materials":null}'
      kafka-console-producer --bootstrap-server kafka:29092 --topic product-compositions --property 'parse.key=true' --property 'key.separator=|' <<< 'P123|{"materials":[{"id":"WOOD","weightInGram":500},{"id":"STEEL","weightInGram":500},{"id":"FABRIC","weightInGram":100}]}'
      kafka-console-producer --bootstrap-server kafka:29092 --topic product-compositions --property 'parse.key=true' --property 'key.separator=|' <<< 'P456|{"materials":[{"id":"STEEL","weightInGram":1200},{"id":"WOOD","weightInGram":700}]}'
      kafka-console-producer --bootstrap-server kafka:29092 --topic product-compositions --property 'parse.key=true' --property 'key.separator=|' <<< 'P789|{"materials":[{"id":"PLASTIC","weightInGram":500},{"id":"FABRIC","weightInGram":250},{"id":"RUBBER","weightInGram":100},{"id":"GLASS","weightInGram":300}]}'
      echo 'published product composition messages'
      "
  akhq:
    image: tchiotludo/akhq
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - "9000:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          pagination:
            page-size: 50
          connections:
            docker-kafka-server:
              properties:
                 bootstrap.servers: "kafka:29092"
  pgadmin:
    image: dpage/pgadmin4:9.4
    environment:
      PGADMIN_DEFAULT_EMAIL: unused@zenika.com
      PGADMIN_DEFAULT_PASSWORD: unused
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_CONFIG_WTF_CSRF_ENABLED: 'False'
    volumes:
       - pgadmin:/var/lib/pgadmin
    ports:
      - 5050:80
    restart: unless-stopped
    configs:
      - source: servers.json
        target: /pgadmin4/servers.json
    entrypoint: >
      sh -c "echo 'database:5432:*:postgres:postgres' > /var/lib/pgadmin/.pgpass && chmod 600 /var/lib/pgadmin/.pgpass && chown 5050:0 /var/lib/pgadmin/.pgpass  && /entrypoint.sh"

volumes:
  db-data:
  pgadmin:

configs:
  servers.json:
    file: ./db/servers.json
